costs
}
costs <- gradientDescent(c(30, 1), myMatrix, 0.5)
plot(costs)
source('~/cousera-ml/gradient-descent/gradient_vectorized.R')
source('~/cousera-ml/gradient-descent/gradient_vectorized.R')
source('~/cousera-ml/gradient-descent/gradient_vectorized.R')
rm(list = ls())
source('~/cousera-ml/gradient-descent/gradient_vectorized.R')
myMatrix <- data.frame(x = c(0,1,2), y=c(1,3,5))
costs <- gradientDescent(c(30, 1), myMatrix, 0.5)
source('~/cousera-ml/gradient-descent/gradient_vectorized.R')
costs <- gradientDescent(c(30, 1), myMatrix, 0.5)
source('~/cousera-ml/gradient-descent/gradient_vectorized.R')
rm(list = ls())
myMatrix <- data.frame(x = c(0,1,2), y=c(1,3,5))
costs <- gradientDescent(c(30, 1), myMatrix, 0.5)
source('~/cousera-ml/gradient-descent/gradient_vectorized.R')
myMatrix <- data.frame(x = c(0,1,2), y=c(1,3,5))
costs <- gradientDescent(c(30, 1), myMatrix, 0.5)
plot(costs)
source('~/cousera-ml/gradient-descent/gradient_vectorized.R')
source('~/cousera-ml/gradient-descent/gradient_vectorized.R')
rm(list = ls())
source('~/cousera-ml/gradient-descent/gradient_vectorized.R')
rm(list = ls())
myMatrix <- data.frame(x = c(0,1,2), y=c(1,3,5))
costs <- gradientDescent(c(30, 1), myMatrix, 0.5)
plot(costs)
source('~/cousera-ml/gradient-descent/gradient_vectorized.R')
myMatrix <- data.frame(x = c(0,1,2), y=c(1,3,5))
costs <- gradientDescent(c(30, 1), myMatrix, 0.5)
plot(costs)
data("ChickWeight")
cao <- subset(ChickWeight, Chick == 1 & Diet == 1)
myMatrix <- data.frame(x = cao$Time, y = cao$weight)
plot(myMatrix)
costs <- gradientDescent(30, 1, myMatrix, 0.01)
myMatrix <- data.frame(x = cao$Time, y = cao$weight)
plot(myMatrix)
costs <- gradientDescent(c(30, 1), myMatrix, 0.01)
plot(costs)
lm(myMatrix$y ~ myMatrix$x)$coefficients
data("mtcars")
head(mtcars)
myMatrix <- data.frame(x = mtcars$hp, y = mtcars$mpg)
plot(myMatrix)
lm(myMatrix$y ~ myMatrix$x)$coefficients
costs <- gradientDescent(30, 1, myMatrix, 0.00001)
data("mtcars")
head(mtcars)
myMatrix <- data.frame(x = mtcars$hp, y = mtcars$mpg)
plot(myMatrix)
lm(myMatrix$y ~ myMatrix$x)$coefficients
costs <- gradientDescent(c(30, 1), myMatrix, 0.00001)
plot(costs)
source('~/cousera-ml/gradient-descent/gradient_vectorized.R')
source('~/cousera-ml/gradient-descent/gradient_vectorized.R')
source('~/cousera-ml/gradient-descent/gradient_vectorized.R')
source('~/cousera-ml/gradient-descent/gradient_vectorized.R')
source('~/cousera-ml/gradient-descent/gradient_vectorized.R')
source('~/cousera-ml/gradient-descent/gradient_vectorized.R')
source('~/cousera-ml/gradient-descent/gradient_vectorized.R')
rm(list = ls())
source('~/cousera-ml/gradient-descent/gradient_vectorized.R')
myMatrix <- data.frame(x = c(0,1,2), y=c(1,3,5))
xMatrix <- cbind( x0 = rep(1,nrow(myMatrix)) , x1 = myMatrix$x )
yVector <- myMatrix$y
costs <- gradientDescent(c(30, 1), xMatrix, yVector, 0.5)
plot(costs)
data("ChickWeight")
cao <- subset(ChickWeight, Chick == 1 & Diet == 1)
myMatrix <- data.frame(x = cao$Time, y = cao$weight)
xMatrix <- cbind( x0 = rep(1,nrow(myMatrix)) , x1 = myMatrix$x )
yVector <- myMatrix$y
plot(myMatrix)
costs <- gradientDescent(c(30, 1), xMatrix, yVector, 0.01)
plot(costs)
data("mtcars")
head(mtcars)
myMatrix <- data.frame(x = mtcars$hp, y = mtcars$mpg)
xMatrix <- cbind( x0 = rep(1,nrow(myMatrix)) , x1 = myMatrix$x )
yVector <- myMatrix$y
plot(myMatrix)
lm(myMatrix$y ~ myMatrix$x)$coefficients
costs <- gradientDescent(c(30, 1), xMatrix, yVector, 0.00001)
plot(costs)
source('~/cousera-ml/gradient-descent/gradient_vectorized.R')
source('~/cousera-ml/gradient-descent/gradient_vectorized.R')
source('~/cousera-ml/gradient-descent/gradient_vectorized.R')
rm(list = ls())
source('~/cousera-ml/gradient-descent/gradient_vectorized.R')
myMatrix <- data.frame(x = c(0,1,2), y=c(1,3,5))
xMatrix <- cbind( x0 = rep(1,nrow(myMatrix)) , x1 = myMatrix$x )
yVector <- myMatrix$y
costs <- gradientDescent(c(30, 1), xMatrix, yVector, 0.5)
plot(costs)
data("ChickWeight")
cao <- subset(ChickWeight, Chick == 1 & Diet == 1)
myMatrix <- data.frame(x = cao$Time, y = cao$weight)
xMatrix <- cbind( x0 = rep(1,nrow(myMatrix)) , x1 = myMatrix$x )
yVector <- myMatrix$y
plot(myMatrix)
costs <- gradientDescent(c(30, 1), xMatrix, yVector, 0.01)
plot(costs)
lm(myMatrix$y ~ myMatrix$x)$coefficients
data("mtcars")
head(mtcars)
myMatrix <- data.frame(x = mtcars$hp, y = mtcars$mpg)
xMatrix <- cbind( x0 = rep(1,nrow(myMatrix)) , x1 = myMatrix$x )
yVector <- myMatrix$y
plot(myMatrix)
lm(myMatrix$y ~ myMatrix$x)$coefficients
costs <- gradientDescent(c(30, 1), xMatrix, yVector, 0.00001)
plot(costs)
costFunction <- function(thetas, xMatrix, yVector, m) {
1/(2*m) * sum((thetas %*% t(xMatrix) - yVector)^2)
}
tetaDerivativeSum <- function(thetas, xMatrix, yVector) {
(thetas %*% t(xMatrix) - yVector) %*% xMatrix
}
gradientDescent <- function(thetas, xMatrix, yVector, alfa) {
m <- nrow(xMatrix)
costs <- rep(NA, 5000)
for (i in 1:5000) {
temps <- thetas - alfa*(1/length(myMatrix$x)) * tetaDerivativeSum(thetas, xMatrix, yVector)
costs[i] <- costFunction(temps, xMatrix, yVector, m)
thetas <- temps
}
print(thetas)
costs
}
myMatrix <- data.frame(x = c(0,1,2), y=c(1,3,5))
xMatrix <- cbind( x0 = rep(1,nrow(myMatrix)) , x1 = myMatrix$x )
yVector <- myMatrix$y
costs <- gradientDescent(c(30, 1), xMatrix, yVector, 0.5)
plot(costs)
source('~/cousera-ml/gradient-descent/gradient_vectorized.R')
rm(list = ls())
source('~/cousera-ml/gradient-descent/gradient_vectorized.R')
myMatrix <- data.frame(x = c(0,1,2), y=c(1,3,5))
xMatrix <- cbind( x0 = rep(1,nrow(myMatrix)) , x1 = myMatrix$x )
yVector <- myMatrix$y
costs <- gradientDescent(c(30, 1), xMatrix, yVector, 0.5)
source('~/cousera-ml/gradient-descent/gradient_vectorized.R')
rm(list = ls())
source('~/cousera-ml/gradient-descent/gradient_vectorized.R')
myMatrix <- data.frame(x = c(0,1,2), y=c(1,3,5))
xMatrix <- cbind( x0 = rep(1,nrow(myMatrix)) , x1 = myMatrix$x )
yVector <- myMatrix$y
costs <- gradientDescent(c(30, 1), xMatrix, yVector, 0.5)
plot(costs)
read.csv2('~/coursera-ml/code1/machine-learning-ex1/ex1/ex1data2.txt', header=FALSE, sep=',')
read.csv2('/home/nozes/cousera-ml/code1/machine-learning-ex1/ex1/ex1data2.txt', header=FALSE, sep=',')
head(myMatrix)
myMatrix <- read.csv2('/home/nozes/cousera-ml/code1/machine-learning-ex1/ex1/ex1data2.txt', header=FALSE, sep=',')
head(myMatrix)
head(myMatrix$X)
head(myMatrix[1,])
head(myMatrix[,1])
xMatrix <- cbind( x0 = rep(1,nrow(myMatrix)) , x1 = myMatrix[,1] , x2 = myMatrix[,2] )
head(xMatrix)
yVector <- myMatrix[,3]
yVector
costs <- gradientDescent(c(30, 1), xMatrix, yVector, 0.00001)
costs <- gradientDescent(c(30, 1, 5), xMatrix, yVector, 0.00001)
plot(costs)
costs <- gradientDescent(c(30, 1, 5), xMatrix, yVector, 0.00001)
plot(costs)
costs <- gradientDescent(c(30, 1, 5), xMatrix, yVector, 0.000001)
myMatrix
head(myMatrix)
mean(head(myMatrix))
head(myMatrix)
foo <- head(myMatrix)
sum(foo)
foo %*% c(1, 1)
foo
as.matrix(foo) %*% c(1, 1)
as.matrix(foo) %*% c(1, 1, 1)
t(foo)
as.matrix(foo) %*% rep(1, nrow(foo))
t(foo) %*% rep(1, nrow(foo))
foo <- head(myMatrix)
foo
t(foo) %*% rep(1, nrow(foo))
foo
somatorio <- t(foo) %*% rep(1, nrow(foo))
foo
somatorio
foo
foo / somatorio
foo
myMatrix <- read.csv2('/home/nozes/cousera-ml/code1/machine-learning-ex1/ex1/ex1data2.txt', header=FALSE, sep=',')
xMatrix <- cbind( x0 = rep(1,nrow(myMatrix)) , x1 = myMatrix[,1] , x2 = myMatrix[,2] )
yVector <- myMatrix[,3]
xMatrix
yVector
costs <- gradientDescent(c(30, 1, 5), xMatrix, yVector, 0.00001)
plot(costs)
costFunction <- function(thetas, xMatrix, yVector, m) {
1/(2*m) * sum((thetas %*% t(xMatrix) - yVector)^2)
}
tetaDerivativeSum <- function(thetas, xMatrix, yVector) {
(thetas %*% t(xMatrix) - yVector) %*% xMatrix
}
gradientDescent <- function(thetas, xMatrix, yVector, alfa) {
m <- nrow(xMatrix)
costs <- rep(NA, 5000)
for (i in 1:5000) {
thetas <- thetas - alfa*(1/length(myMatrix$x)) * tetaDerivativeSum(thetas, xMatrix, yVector)
costs[i] <- costFunction(thetas, xMatrix, yVector, m)
}
print(thetas)
costs
}
costs <- gradientDescent(c(30, 1, 5), xMatrix, yVector, 0.00001)
source('~/cousera-ml/gradient-descent/gradient_vectorized.R')
costs <- gradientDescent(c(30, 1, 5), xMatrix, yVector, 0.00001)
costs <- gradientDescent(c(30, 1, 5), xMatrix, yVector, 0.00001)
x = cbind(c(1,5), c(2,8))
x
t(x)
t(x) %*% c(1,1)
t(x) %*% c(1,1) / ncol(x)
x
t(x) %*% c(1,1) / ncol(x)
t(x) %*% c(1,1) / ncol(x)[,1]
t(x) %*% c(1,1) / ncol(x)
(t(x) %*% c(1,1) / ncol(x))[,1]
(t(x) %*% c(1,1) / ncol(x))[,1][1]
(t(x) %*% c(1,1) / ncol(x))[,1][2]
(t(x) %*% c(1,1) / ncol(x))[,1]
x
max(x)
colMax(x)
colmax(x)
colMax <- function(data) sapply(data, max, na.rm = TRUE)
colmax(x)
colMax(x)
x
x
source('~/.active-rstudio-document', echo=TRUE)
x
sapply(x, max)
sapply(t(x), max)
sapply(x[,1], max)
colSums(t)
colSums(x)
colMax(x)
sapply(x[,1], max)
scale(x, center=FALSE, scale=colSums(m))
scale(x, center=FALSE, scale=colSums(x))
x
t(t(m)/colSums(m))
t(t(x)/colSums(x))
scale(x, center=FALSE, scale=colSums(x))
colSums(x)
source('~/cousera-ml/gradient-descent/gradient_vectorized.R')
rm(list = ls())
source('~/cousera-ml/gradient-descent/gradient_vectorized.R')
rm(list = ls())
read.csv2('/home/nozes/cousera-ml/code1/machine-learning-ex1/ex1/ex1data2.txt', sep=',')
data <- read.csv2('/home/nozes/cousera-ml/code1/machine-learning-ex1/ex1/ex1data2.txt', sep=',')
myMatrix <- read.csv2('/home/nozes/cousera-ml/code1/machine-learning-ex1/ex1/ex1data2.txt', sep=',')
head(myMatrix)
myMatrix <- read.csv2('/home/nozes/cousera-ml/code1/machine-learning-ex1/ex1/ex1data2.txt', sep=',', header = FALSE)
head(myMatrix)
myMatrix$V1
head(myMatrix)
xMatrix <- cbind( x0 = rep(1,nrow(myMatrix)) , x1 = myMatrix$V1 , x2=myMatrix$V2)
xMatrix
head(myMatrix)
yVector <- myMatrix$V3
yVector
scale(xMatrix, center=FALSE, scale=colSums(xMatrix))
scale(xMatrix, center=FALSE, scale=colSums(xMatrix))
scale(yVector, center=FALSE, scale=yVector)
scale(yVector, center=FALSE, scale=sum(yVector))
xMatrix <- scale(xMatrix, center=FALSE, scale=colSums(xMatrix))
yVector <- scale(yVector, center=FALSE, scale=sum(yVector))
xMatrix
xMatrix
class(xMatrix)
costs <- gradientDescent(c(30, 1, 1), xMatrix, yVector, 0.00001)
costFunction <- function(thetas, xMatrix, yVector, m) {
1/(2*m) * sum((thetas %*% t(xMatrix) - yVector)^2)
}
tetaDerivativeSum <- function(thetas, xMatrix, yVector) {
(thetas %*% t(xMatrix) - yVector) %*% xMatrix
}
gradientDescent <- function(thetas, xMatrix, yVector, alfa) {
m <- nrow(xMatrix)
costs <- rep(NA, 5000)
for (i in 1:5000) {
thetas <- thetas - alfa*(1/length(myMatrix$x)) * tetaDerivativeSum(thetas, xMatrix, yVector)
costs[i] <- costFunction(thetas, xMatrix, yVector, m)
print(costs[i])
}
print(thetas)
costs
}
costs <- gradientDescent(c(30, 1, 1), xMatrix, yVector, 0.00001)
yVector
head(yVector)
head(yVector)[,1]
yVector <- head(yVector)[,1]
costs <- gradientDescent(c(30, 1, 1), xMatrix, yVector, 0.00001)
costs <- gradientDescent(c(30, 1, 1), xMatrix, yVector, 0.00001)
debugSource('~/cousera-ml/gradient-descent/gradient_vectorized.R')
costs <- gradientDescent(c(30, 1, 1), xMatrix, yVector, 0.00001)
source('~/cousera-ml/gradient-descent/gradient_vectorized.R')
myMatrix <- data.frame(x = c(0,1,2), y=c(1,3,5))
xMatrix <- cbind( x0 = rep(1,nrow(myMatrix)) , x1 = myMatrix$x )
yVector <- myMatrix$y
costs <- gradientDescent(c(30, 1), xMatrix, yVector, 0.5)
plot(costs)
myMatrix <- read.csv2('/home/nozes/cousera-ml/code1/machine-learning-ex1/ex1/ex1data2.txt', sep=',', header = FALSE)
head(myMatrix)
xMatrix <- cbind( x0 = rep(1,nrow(myMatrix)) , x1 = myMatrix$V1 , x2=myMatrix$V2)
yVector <- myMatrix$V3
xMatrix <- scale(xMatrix, center=FALSE, scale=colSums(xMatrix))
yVector <- scale(yVector, center=FALSE, scale=sum(yVector))
yVector <- head(yVector)[,1]
xMatrix
yVector
myMatrix <- read.csv2('/home/nozes/cousera-ml/code1/machine-learning-ex1/ex1/ex1data2.txt', sep=',', header = FALSE)
head(myMatrix)
xMatrix <- cbind( x0 = rep(1,nrow(myMatrix)) , x1 = myMatrix$V1 , x2=myMatrix$V2)
yVector <- myMatrix$V3
xMatrix <- scale(xMatrix, center=FALSE, scale=colSums(xMatrix))
yVector <- scale(yVector, center=FALSE, scale=sum(yVector))
yVector <- yVector[,1]
class(xMatrix)
costs <- gradientDescent(c(30, 1, 1), xMatrix, yVector, 0.00001)
plot(costs)
costs <- gradientDescent(c(0.5, 0.5, 0.5), xMatrix, yVector, 0.00001)
xMatrix <- scale(xMatrix, center=FALSE, scale=colSums(xMatrix))
xMatrix
yVector
xMatrix
head(xMatrix)
xMatrix <- cbind(xMatrix$x0, xMatrix$x1, xMatrix$x2)
xMatrix
rm(list = ls())
myMatrix <- read.csv2('/home/nozes/cousera-ml/code1/machine-learning-ex1/ex1/ex1data2.txt', sep=',', header = FALSE)
xMatrix <- cbind( x0 = rep(1,nrow(myMatrix)) , x1 = myMatrix$V1 , x2=myMatrix$V2)
yVector <- myMatrix$V3
xMatrix <- t(t(xMatrix)/colSums(xMatrix))
xMatrix
rm(list = ls())
myMatrix <- read.csv2('/home/nozes/cousera-ml/code1/machine-learning-ex1/ex1/ex1data2.txt', sep=',', header = FALSE)
xMatrix <- t(t(xMatrix)/colSums(xMatrix))
xMatrix <- cbind( x0 = rep(1,nrow(myMatrix)) , x1 = myMatrix$V1 , x2=myMatrix$V2)
yVector <- myMatrix$V3
head(xMatrix)
head(xMatrix)
myMatrix <- read.csv2('/home/nozes/cousera-ml/code1/machine-learning-ex1/ex1/ex1data2.txt', sep=',', header = FALSE)
rm(list = ls())
myMatrix <- read.csv2('/home/nozes/cousera-ml/code1/machine-learning-ex1/ex1/ex1data2.txt', sep=',', header = FALSE)
myMatrix <- t(t(myMatrix)/colSums(myMatrix))
xMatrix <- cbind( x0 = rep(1,nrow(myMatrix)) , x1 = myMatrix$V1 , x2=myMatrix$V2)
yVector <- myMatrix$V3
head(xMatrix)
rm(list = ls())
myMatrix <- read.csv2('/home/nozes/cousera-ml/code1/machine-learning-ex1/ex1/ex1data2.txt', sep=',', header = FALSE)
myMatrix <- t(t(myMatrix)/colSums(myMatrix))
xMatrix <- cbind( x0 = rep(1,nrow(myMatrix)) , x1 = myMatrix$V1 , x2=myMatrix$V2)
head(myMatrix)
xMatrix <- cbind( x0 = rep(1,nrow(myMatrix)) , x1 = myMatrix$V1 , x2=myMatrix$V2)
head(myMatrix)
head(myMatrix[,1])
rm(list = ls())
myMatrix <- read.csv2('/home/nozes/cousera-ml/code1/machine-learning-ex1/ex1/ex1data2.txt', sep=',', header = FALSE)
myMatrix <- t(t(myMatrix)/colSums(myMatrix))
xMatrix <- cbind( x0 = rep(1,nrow(myMatrix)) , x1 = myMatrix[,1] , x2=myMatrix[,2])
yVector <- myMatrix[,3]
head(xMatrix)
xMatrix <- cbind(xMatrix$x0, xMatrix$x1, xMatrix$x2)
head(xMatrix)
yVector
costs <- gradientDescent(c(0.5, 0.5, 0.5), xMatrix, yVector, 0.00001)
costFunction <- function(thetas, xMatrix, yVector, m) {
1/(2*m) * sum((thetas %*% t(xMatrix) - yVector)^2)
}
tetaDerivativeSum <- function(thetas, xMatrix, yVector) {
(thetas %*% t(xMatrix) - yVector) %*% xMatrix
}
gradientDescent <- function(thetas, xMatrix, yVector, alfa) {
m <- nrow(xMatrix)
costs <- rep(NA, 5000)
for (i in 1:5000) {
thetas <- thetas - alfa*(1/length(myMatrix$x)) * tetaDerivativeSum(thetas, xMatrix, yVector)
costs[i] <- costFunction(thetas, xMatrix, yVector, m)
print(costs[i])
}
print(thetas)
costs
}
costs <- gradientDescent(c(0.5, 0.5, 0.5), xMatrix, yVector, 0.00001)
source('~/cousera-ml/gradient-descent/gradient_vectorized.R')
costs <- gradientDescent(c(0.5, 0.5, 0.5), xMatrix, yVector, 0.00001)
plot(costs)
costs <- gradientDescent(c(4, 22, 3), xMatrix, yVector, 0.00001)
plot(costs)
costs[1]
plot(costs)
costs[1]
costs <- gradientDescent(c(4, 22, 3), xMatrix, yVector, 0.1)
plot(costs)
costs <- gradientDescent(c(4, 22, 3), xMatrix, yVector, 0.5)
plot(costs)
costs <- gradientDescent(c(4, 22, 3), xMatrix, yVector, 1)
plot(costs)
0.5
costs <- gradientDescent(c(4, 22, 3), xMatrix, yVector, 0.5)
costs <- gradientDescent(c(4, 22, 3), xMatrix, yVector, 0.5)
plot(costs)
costs <- gradientDescent(c(4, 22, 3), xMatrix, yVector, 1)
plot(costs)
costs <- gradientDescent(c(4, 22, 3), xMatrix, yVector, 2)
plot(costs)
costs <- gradientDescent(c(4, 22, 3), xMatrix, yVector, 1)
plot(costs)
source('~/cousera-ml/gradient-descent/gradient_vectorized.R')
costs <- gradientDescent(c(4, 22, 3), xMatrix, yVector, 1, 10000)
plot(costs)
costs <- gradientDescent(c(4, 22, 3), xMatrix, yVector, 1, 100000)
plot(costs)
source('~/cousera-ml/gradient-descent/gradient_vectorized.R')
source('~/cousera-ml/gradient-descent/gradient_vectorized.R')
rm(list = ls())
source('~/cousera-ml/gradient-descent/gradient_vectorized.R')
rm(list = ls())
myMatrix <- data.frame(x = c(0,1,2), y=c(1,3,5))
xMatrix <- cbind( x0 = rep(1,nrow(myMatrix)) , x1 = myMatrix$x )
yVector <- myMatrix$y
costs <- gradientDescent(c(30, 1), xMatrix, yVector, 0.5)
plot(costs)
source('~/cousera-ml/gradient-descent/gradient_vectorized.R')
setwd('~/cousera-ml/gradient-descent')
rm(list = ls())
source('~/cousera-ml/gradient-descent/gradient_vectorized.R')
myMatrix <- data.frame(x = c(0,1,2), y=c(1,3,5))
xMatrix <- cbind( x0 = rep(1,nrow(myMatrix)) , x1 = myMatrix$x )
yVector <- myMatrix$y
costs <- gradientDescent(c(30, 1), xMatrix, yVector, 0.5)
costs <- gradientDescent(c(30, 1), xMatrix, yVector, 0.5, 5000)
plot(costs)
data("ChickWeight")
cao <- subset(ChickWeight, Chick == 1 & Diet == 1)
myMatrix <- data.frame(x = cao$Time, y = cao$weight)
xMatrix <- cbind( x0 = rep(1,nrow(myMatrix)) , x1 = myMatrix$x )
yVector <- myMatrix$y
plot(myMatrix)
costs <- gradientDescent(c(30, 1), xMatrix, yVector, 0.01)
costs <- gradientDescent(c(30, 1), xMatrix, yVector, 0.01, 5000)
plot(costs)
lm(myMatrix$y ~ myMatrix$x)$coefficients
data("mtcars")
head(mtcars)
myMatrix <- data.frame(x = mtcars$hp, y = mtcars$mpg)
xMatrix <- cbind( x0 = rep(1,nrow(myMatrix)) , x1 = myMatrix$x )
yVector <- myMatrix$y
plot(myMatrix)
costs <- gradientDescent(c(30, 1), xMatrix, yVector, 0.00001)
costs <- gradientDescent(c(30, 1), xMatrix, yVector, 0.00001, 5000)
plot(costs)
myMatrix <- read.csv2('ex1data2.txt', sep=',', header = FALSE)
myMatrix <- t(t(myMatrix)/colSums(myMatrix))
xMatrix <- cbind( x0 = rep(1,nrow(myMatrix)) , x1 = myMatrix[,1] , x2=myMatrix[,2])
yVector <- myMatrix[,3]
costs <- gradientDescent(c(4, 22, 3), xMatrix, yVector, 1, 100000)
plot(costs)
source('~/cousera-ml/gradient-descent/gradient_vectorized.R')
library(scatterplot3d)
install.packages('scatterplot3d')
library(scatterplot3d)
myMatrix <- read.csv2('ex1data2.txt', sep=',', header = FALSE)
myMatrix <- t(t(myMatrix)/colSums(myMatrix))
xMatrix <- cbind( x0 = rep(1,nrow(myMatrix)) , x1 = myMatrix[,1] , x2=myMatrix[,2])
yVector <- myMatrix[,3]
head(myMatrix)
with(myMatrix, scatterplot3d(V1, V2, V3))
myMatrix <- t(t(myMatrix)/colSums(myMatrix))
xMatrix <- cbind( x0 = rep(1,nrow(myMatrix)) , x1 = myMatrix[,1] , x2=myMatrix[,2])
yVector <- myMatrix[,3]
costs <- gradientDescent(c(4, 22, 3), xMatrix, yVector, 1, 100000)
plot(costs)
head(myMatrix)
library(scatterplot3d)
with(myMatrix, scatterplot3d(V1, V2, V3))
with(myMatrix, scatterplot3d(V1, V2, V3, main='foo'))
with(myMatrix, {scatterplot3d(V1, V2, V3, main='foo')})
myMatrix$V1
scatterplot3d(myMatrix[,1], myMatrix[,2], myMatrix[,3], main='foo')
plot3d(myMatrix[,1], myMatrix[,2], myMatrix[,3], main='foo')
library(rgl)
install.package('rgl')
install.packages('rgl')
plot3d(myMatrix[,1], myMatrix[,2], myMatrix[,3], main='foo')
plot3d(myMatrix[,1], myMatrix[,2], myMatrix[,3], main='foo')
library(rgl)
library(rgl)
install.packages('rgl')
myMatrix <- t(t(myMatrix)/colSums(myMatrix))
xMatrix <- cbind( x0 = rep(1,nrow(myMatrix)) , x1 = myMatrix[,1] , x2=myMatrix[,2])
yVector <- myMatrix[,3]
costs <- gradientDescent(c(4, 22, 3), xMatrix, yVector, 1, 100000)
plot(costs)
source('~/cousera-ml/gradient-descent/gradient_vectorized.R')
source('~/cousera-ml/gradient-descent/gradient_vectorized.R')
